/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftpstorage.views;

import ftpstorage.client.Client;
import ftpstorage.client.IClient;
import ftpstorage.views.components.FileRemoteTableModel;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;

/**
 *
 * @author HP Zbook 15
 */
public class MainFrameClient extends javax.swing.JFrame {

    private IClient client;

    private FileRemoteTableModel fileRemoteTableModel = new FileRemoteTableModel();

//    private PanelLocalFile fileLocal = new PanelLocalFile();
//    private PanelRemoteFile fileRemote = new PanelRemoteFile();
    private PanelFilesStatus filesStatus;

    /**
     * Creates new form MainFrameClient
     */
    public MainFrameClient() {
        this.client = new Client(this);
        this.filesStatus = new PanelFilesStatus(client);

        initComponents();

//        this.pnlMain.add(fileLocal);
//        this.pnlMain.add(fileRemote);
        this.pnlMain.add(filesStatus);
//        btnConnect.doClick();//FIXME: del me

    }

    public PanelFilesStatus getPnlFilesStatus() {
        return this.filesStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenuOptionFile = new javax.swing.JPopupMenu();
        menuItemDownload = new javax.swing.JMenuItem();
        menuItemDelete = new javax.swing.JMenuItem();
        menuItemNewFolder = new javax.swing.JMenuItem();
        menuItemRename = new javax.swing.JMenuItem();
        pnlConnect = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        txtAddress = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        btnDisconnect = new javax.swing.JButton();
        btnConnectStatus = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        pnlShowFile = new javax.swing.JPanel();
        btnGoBack = new javax.swing.JButton();
        txtFilePathRemote = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnGo = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblShowFileRemote = new javax.swing.JTable();
        btnUpload = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        menuItemDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Download.png"))); // NOI18N
        menuItemDownload.setText("Download");
        menuItemDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDownloadActionPerformed(evt);
            }
        });
        popupMenuOptionFile.add(menuItemDownload);

        menuItemDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Delete.png"))); // NOI18N
        menuItemDelete.setText("Delete");
        menuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteActionPerformed(evt);
            }
        });
        popupMenuOptionFile.add(menuItemDelete);

        menuItemNewFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Folder.png"))); // NOI18N
        menuItemNewFolder.setText("New folder");
        menuItemNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewFolderActionPerformed(evt);
            }
        });
        popupMenuOptionFile.add(menuItemNewFolder);

        menuItemRename.setText("Rename");
        popupMenuOptionFile.add(menuItemRename);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        pnlConnect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlConnect.setMaximumSize(new java.awt.Dimension(963, 47));

        jLabel1.setText("Address:");

        jLabel2.setText("Port:");

        jLabel3.setText("Username:");

        jLabel4.setText("Password:");

        btnConnect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtAddress.setText("localhost");

        txtPort.setText("21");

        txtUsername.setText("tienthien");

        password.setText("tienthien");

        btnDisconnect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDisconnect.setForeground(new java.awt.Color(204, 0, 0));
        btnDisconnect.setText("Disconnected");
        btnDisconnect.setEnabled(false);
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        btnConnectStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Forbidden.png"))); // NOI18N

        javax.swing.GroupLayout pnlConnectLayout = new javax.swing.GroupLayout(pnlConnect);
        pnlConnect.setLayout(pnlConnectLayout);
        pnlConnectLayout.setHorizontalGroup(
            pnlConnectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConnectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAddress)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConnect)
                .addGap(18, 18, 18)
                .addComponent(btnDisconnect)
                .addGap(18, 18, 18)
                .addComponent(btnConnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlConnectLayout.setVerticalGroup(
            pnlConnectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConnectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConnectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(btnConnect)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDisconnect)
                    .addComponent(btnConnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlMain.setMaximumSize(new java.awt.Dimension(1280, 623));
        pnlMain.setMinimumSize(new java.awt.Dimension(1280, 623));
        pnlMain.setPreferredSize(new java.awt.Dimension(1280, 623));

        pnlShowFile.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "File Remote", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        btnGoBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Go back.png"))); // NOI18N
        btnGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackActionPerformed(evt);
            }
        });

        txtFilePathRemote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFilePathRemoteKeyPressed(evt);
            }
        });

        jLabel5.setText("Path:");

        btnGo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Go.png"))); // NOI18N
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        tblShowFileRemote.setAutoCreateRowSorter(true);
        tblShowFileRemote.setModel(fileRemoteTableModel);
        tblShowFileRemote.setRowHeight(20);
        tblShowFileRemote.setShowVerticalLines(false);
        tblShowFileRemote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblShowFileRemoteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblShowFileRemote);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1230, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
        );

        btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Up.png"))); // NOI18N
        btnUpload.setText("upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlShowFileLayout = new javax.swing.GroupLayout(pnlShowFile);
        pnlShowFile.setLayout(pnlShowFileLayout);
        pnlShowFileLayout.setHorizontalGroup(
            pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlShowFileLayout.createSequentialGroup()
                        .addComponent(btnGoBack)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilePathRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 948, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGo)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlShowFileLayout.setVerticalGroup(
            pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShowFileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnGo)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlShowFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFilePathRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btnGoBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnUpload))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMain.add(pnlShowFile);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        String address = this.txtAddress.getText();
        int port = Integer.parseInt(this.txtPort.getText());
        String username = this.txtUsername.getText();
        String password = new String(this.password.getPassword());

        try {
            client.connect(address, port, username, password);
            JOptionPane.showMessageDialog(this, "Connect successful!", "Connect message", JOptionPane.INFORMATION_MESSAGE);

            this.btnConnect.setText("Connected");
            this.btnConnect.setEnabled(false);
            this.btnConnect.setForeground(Color.green);

            this.btnConnectStatus.setIcon(new ImageIcon("src/resources/OK.png"));

            this.btnDisconnect.setEnabled(true);
            this.btnDisconnect.setText("Disconnect");

            loadUnfinished();

            showRemoteFile();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Connect failed!", "Connect message", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try {
            this.client.disconnect();
            JOptionPane.showMessageDialog(this, "Disconnect successful!", "Disconnect message", JOptionPane.INFORMATION_MESSAGE);

            this.btnConnect.setText("Connect");
            this.btnConnect.setEnabled(true);
            this.btnConnect.setForeground(Color.black);

            this.btnConnectStatus.setIcon(new ImageIcon("src/resources/Forbidden.png"));

            this.btnDisconnect.setText("Disconnected");
            this.btnDisconnect.setEnabled(false);

            removeShowRemoteFile();
            removeFilesStatus();
        } catch (IOException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void tblShowFileRemoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblShowFileRemoteMouseClicked
        JTable table = (JTable) evt.getComponent();
        int row = table.rowAtPoint(evt.getPoint());
        int column = table.columnAtPoint(evt.getPoint());
        if (!table.isRowSelected(row)) {
            table.changeSelection(row, column, false, false);
        }
//        System.out.println(row);
//        row = this.tblShowFileRemote.getSelectedRow();
        switch (evt.getButton()) {
            case 1:
//                System.out.println(row);
                if (evt.getClickCount() > 1) {
                    if (!this.fileRemoteTableModel.isFile(row)) {
                        String name = this.fileRemoteTableModel.getName(row);
                        String path = this.txtFilePathRemote.getText();
                        removeShowRemoteFile();
                        this.txtFilePathRemote.setText(path + "/" + name);
                        try {
                            client.cd(this.txtFilePathRemote.getText());
                        } catch (IOException ex) {
                            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        showRemoteFile();
                    }
                }
                break;
            case 2:
                break;
            case 3:

                this.popupMenuOptionFile.show(evt.getComponent(), evt.getX(), evt.getY());
                break;
        }
    }//GEN-LAST:event_tblShowFileRemoteMouseClicked

    private void menuItemDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDownloadActionPerformed
        int row = this.tblShowFileRemote.getSelectedRow();
        try {
            if (!this.fileRemoteTableModel.isFile(row)) {
                throw new IOException("This is folder. Canot download folder");
            }
            String filename = this.fileRemoteTableModel.getFileName(row);
            File folder = chooseFolder();
            if (folder == null) {
                JOptionPane.showMessageDialog(pnlShowFile, "Please choose folder to save.");
                return;
            }
            File f = new File(folder, filename);
            this.filesStatus.addFileStatus(filename, true);
            long[] offsets = new long[4];
            long length = client.get(filename, offsets, f);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(pnlShowFile, "Sorry this app can't download folder! This function coming soon!!!", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemDownloadActionPerformed

    private void btnGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackActionPerformed
        try {
            client.cdup();
            removeShowRemoteFile();
            showRemoteFile();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(pnlShowFile, "Can't move up!", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGoBackActionPerformed

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        String path = txtFilePathRemote.getText();
        try {
            client.cd(path);
            removeShowRemoteFile();
            showRemoteFile();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(pnlShowFile, "Can't go to this path!", "Error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGoActionPerformed

    private void txtFilePathRemoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilePathRemoteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnGo.doClick();
        }
    }//GEN-LAST:event_txtFilePathRemoteKeyPressed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        File file = chooseFile();
        if (file == null) {
            JOptionPane.showMessageDialog(pnlShowFile, "Please choose file to upload.");
            return;
        }
        try {
            this.filesStatus.addFileStatus(file.getName(), false);
            client.put(file);
        } catch (IOException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void menuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteActionPerformed
        int row = this.tblShowFileRemote.getSelectedRow();
        String filename = this.fileRemoteTableModel.getFileName(row);
        int choose = JOptionPane.showConfirmDialog(pnlShowFile, "Are you sure you want to delete " + filename);
        if (choose == JOptionPane.YES_OPTION) {
            try {
                if (!this.fileRemoteTableModel.isFile(row)) {
                    client.rmdir(filename);
                } else {
                    client.delete(filename);
                }
                refreshRemoteFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(pnlShowFile, "Can't delete " + filename, "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuItemDeleteActionPerformed

    private void menuItemNewFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewFolderActionPerformed
//        int row = this.tblShowFileRemote.getSelectedRow();
//        String filename = this.fileRemoteTableModel.getFileName(row);
        String name = JOptionPane.showInputDialog(pnlShowFile, "Enter your name of folder (name don't contain space)");
        if (name.length() == 0) {
            name = "new_folder";
        }
        try {
            client.makedir(name);
            refreshRemoteFile();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(pnlShowFile, "Can't make " + name, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemNewFolderActionPerformed

    private File chooseFolder() {
        JFileChooser chooser = new JFileChooser("./local/");
        chooser.setDialogTitle("Choose folder destination to download file.");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile();
        }
        return null;
    }

    private File chooseFile() {
        JFileChooser chooser = new JFileChooser("./local/");
        chooser.setDialogTitle("Choose folder destination to download file.");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile();
        }
        return null;
    }

    public void showRemoteFile() {
        String response = null;
        try {
            this.txtFilePathRemote.setText(client.pwd());
            response = this.client.list();
        } catch (IOException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        String[] parsed = response.split("\n");
        if (response.length() < 5) {
            parsed = new String[0];
        }
        this.fileRemoteTableModel.setFiles(parsed);
    }

    public void removeShowRemoteFile() {
        this.txtFilePathRemote.setText("");
        this.fileRemoteTableModel.setFiles(new String[0]);
    }

    public void removeFilesStatus() {
        this.filesStatus.removeAllFileStatus();
    }

    public void refreshRemoteFile() {
        removeShowRemoteFile();
        showRemoteFile();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrameClient().setVisible(true);
            }
        });
    }

//    private String[] tableFileHeader = {"Name", "Type", "Size", "Date"};
//    private SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy/MM/dd-hh:mm");
//    private ImageIcon iconFile = new ImageIcon("src/resources/document_32.png");
//    private ImageIcon iconDirectory = new ImageIcon("src/resources/folder_32.png");

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnConnectStatus;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnGoBack;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem menuItemDelete;
    private javax.swing.JMenuItem menuItemDownload;
    private javax.swing.JMenuItem menuItemNewFolder;
    private javax.swing.JMenuItem menuItemRename;
    private javax.swing.JPasswordField password;
    private javax.swing.JPanel pnlConnect;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlShowFile;
    private javax.swing.JPopupMenu popupMenuOptionFile;
    private javax.swing.JTable tblShowFileRemote;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtFilePathRemote;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    public JProgressBar[] getProgressBars() {
        return this.filesStatus.getProgressBars();
    }

    public void notifyComplete(int i) {
        this.filesStatus.notifyComplete(i);
        if (!isFileDownload(i)) {
            removeShowRemoteFile();
            showRemoteFile();
        }
    }

    private boolean isFileDownload(int i) {
        return this.filesStatus.isFileDownload(i);
    }

//    private void saveUnfinished(){
//        this.client.saveUnfinished();
//    }
    private void loadUnfinished() {
        this.client.loadUnfinished();
    }

}
