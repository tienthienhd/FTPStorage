/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftpstorageserver.server.views;

import ftpstorageserver.server.views.components.PanelClientListener;
import ftpstorageserver.server.Server;
import ftpstorageserver.server.ServerListener;
import ftpstorageserver.server.Session;
import ftpstorageserver.server.views.components.PanelClient;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author HP Zbook 15
 */
public class MainFrame extends javax.swing.JFrame implements ServerListener, PanelClientListener {

    private Server server;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initServer();
        
        initComponents();
//        PanelClient p = new PanelClient();
//        this.pnlClients.add(p);
//        this.pnlClients.setTitleAt(0, "Client 1");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConnection = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnStartService = new javax.swing.JButton();
        comboBoxMaxClient = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNumberConnected = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        btnStopService = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        pnlClients = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");
        setMaximumSize(new java.awt.Dimension(1024, 720));
        setMinimumSize(new java.awt.Dimension(1024, 720));
        setPreferredSize(new java.awt.Dimension(1024, 720));
        setResizable(false);

        pnlConnection.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Connection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Port:");

        txtPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPort.setText("21");

        btnStartService.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStartService.setForeground(new java.awt.Color(0, 153, 0));
        btnStartService.setText("Start Service");
        btnStartService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServiceActionPerformed(evt);
            }
        });

        comboBoxMaxClient.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboBoxMaxClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        comboBoxMaxClient.setSelectedIndex(10);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Max Connection:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Number Connected:");

        txtNumberConnected.setEditable(false);
        txtNumberConnected.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNumberConnected.setText("0");

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 0, 0));
        lblStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Forbidden.png"))); // NOI18N
        lblStatus.setText("Stop Listening");

        btnStopService.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStopService.setForeground(new java.awt.Color(204, 0, 0));
        btnStopService.setText("Stop Service");
        btnStopService.setEnabled(false);
        btnStopService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopServiceActionPerformed(evt);
            }
        });

        btnPause.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPause.setText("Pause");
        btnPause.setEnabled(false);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConnectionLayout = new javax.swing.GroupLayout(pnlConnection);
        pnlConnection.setLayout(pnlConnectionLayout);
        pnlConnectionLayout.setHorizontalGroup(
            pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConnectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxMaxClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumberConnected, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnStartService)
                .addGap(18, 18, 18)
                .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnStopService, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        pnlConnectionLayout.setVerticalGroup(
            pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConnectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStartService)
                    .addComponent(comboBoxMaxClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txtNumberConnected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus)
                    .addComponent(btnStopService)
                    .addComponent(btnPause))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlClients.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Clients", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlClients)
            .addComponent(pnlConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlClients, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartServiceActionPerformed
        int port = 21;
        int maxClient = this.comboBoxMaxClient.getSelectedIndex();
        try {
            port = Integer.parseInt(txtPort.getText());
        } catch(NumberFormatException e){
           JOptionPane.showMessageDialog(this, "Port must be number: " + e, "Error", JOptionPane.ERROR_MESSAGE);
           return;
        }
        
        if (!server.isListening()) {
            server.startListening(port, maxClient);
            this.btnStartService.setEnabled(false);
            this.btnStopService.setEnabled(true);
            this.lblStatus.setText("Listening");
            this.lblStatus.setIcon(new ImageIcon("src/resources/Ok.png"));
            this.btnPause.setEnabled(true);
        }
    }//GEN-LAST:event_btnStartServiceActionPerformed

    private void btnStopServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopServiceActionPerformed
         if (server.isListening()) {
            server.stopListening();
            this.btnStopService.setEnabled(false);
            this.btnStartService.setEnabled(true);
            this.lblStatus.setText("Not Listening");
            this.lblStatus.setIcon(new ImageIcon("src/resources/Forbidden.png"));
            this.btnPause.setEnabled(false);
        }
    }//GEN-LAST:event_btnStopServiceActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        if(this.server.isNotified()){
            this.server.pauseListening();
            this.btnPause.setText("Resume");
            this.lblStatus.setIcon(new ImageIcon("src/resources/Pause.png"));
        } else {
            this.server.resumeListening();
            this.btnPause.setText("Pause");
            this.lblStatus.setIcon(new ImageIcon("src/resources/Ok.png"));
        }
    }//GEN-LAST:event_btnPauseActionPerformed

    @Override
    public void notifyConnected(Session s) {
        PanelClient pc = new PanelClient();
        pc.setListener(this);
        this.pnlClients.add(pc);
        int index = this.pnlClients.getTabCount() - 1;
        this.pnlClients.setTitleAt(index, "Client " + index);
        this.txtNumberConnected.setText((index+1) + "");
        
        System.out.println("set Text commnad");
        s.setTxtCommand(pc.getTxtCommand());
    }
    
    @Override
    public void notifyLogin(Session s){
        int index = this.server.getSession(s);
        this.pnlClients.setTitleAt(index, s.getUsername());
    }
    
    @Override
    public void notifyDisconnected(int index){
        this.pnlClients.remove(index);
        this.txtNumberConnected.setText((this.pnlClients.getTabCount()) + "");
    }
    
    @Override
    public void disconnectClient(PanelClient pl){
        int index = this.pnlClients.indexOfComponent(pl);
        this.server.disconnectClient(index);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnStartService;
    private javax.swing.JButton btnStopService;
    private javax.swing.JComboBox<String> comboBoxMaxClient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTabbedPane pnlClients;
    private javax.swing.JPanel pnlConnection;
    private javax.swing.JTextField txtNumberConnected;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    private void loadProperties() {
        Properties prop = new Properties();
        FileInputStream fis = null;
        try {
            try {
                fis = new FileInputStream("ftp.properties");
                prop.load(fis);
            } finally {
                if (fis != null) {
                    fis.close();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (Enumeration e = prop.keys(); e.hasMoreElements();) {
            String key = (String) e.nextElement();
            System.setProperty(key, prop.getProperty(key));
        }
    }

    private void initServer() {
        System.out.println("Load all configuration properties...");
        loadProperties();

        server = new Server();
        server.setListener(this);
    }

}
